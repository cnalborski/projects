
                                     ‹‹
                     ‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹ €€ ‹‹‹ ‹‹ ‹‹‹‹‹‹‹‹
                        ‹‹‹‹‹ ‹‹  ‹‹ €€‹‹‹  ‹‹  ‹‹‹‹‹ tm
                       €€     €€  €€ €€  €€ €€ €€
                       €€     €€  €€ €€  €€ €€ €€
                        ﬂﬂﬂﬂﬂ  ﬂﬂﬂﬂﬂ ﬂﬂﬂﬂﬂ  ﬂﬂ  ﬂﬂﬂﬂﬂ
                     ﬂﬂﬂﬂ tiny gus xm player  v1.4 ﬂﬂﬂﬂ



    Legal disclaimer:
==============================================================================

  You may copy this package without restrictions as long as no
  money is charged for copying and it is passed on unmodified with
  all its files:
    MXMPLAY.ASM           (the player source (TASM 3.1))
    MXMPLAY.OBJ           (the player object)
    MXMPLAY.H             (include file for c/c++)
    MXMPLAY.DOC           (this file)
    FILE_ID.DIZ           (fileid)
    XM2MXM.CPP            (the conversion source)
    XM2MXM.EXE            (the conversion program)
    MXMPLAY.EXE           (compiled C++ example, plays .MXM files)
    CPPEXAM.CPP           (example for Watcom C++ 10.0)
    ASMEXAM.ASM           (example for Assembler (TASM 3.1))
    MAKEFILE.             (makefile for wmake)

  The package is delivered as is. The author does not guarantee to
  make further versions or bugfixes. The author cannot be made liable for
  damage or data loss this piece of code causes, use it at your own risk.

  You may use MXMPLAY in your productions if:
    -you credit me for the player while runtime or in an info file.
    -no money is charged for your production.

  You may modify the source for your productions. (see Introduction!)




    Introduction
==============================================================================

  This is a MOD and XM player package for the Gravis UltraSound in flat mode.
  It was optimized for size not for speed. The size is about 5.6k or 3.8k
  if you pack it with PMWLITE, but the size can be reduced by excluding
  unused effects. It was designed for the compo version of 64k intros,
  originally for the Lasse Reinb0ng Intro by cubic team & $een presented at
  the Party 5 held in the end of December'95 in Fredericia/Denmark.
  It supports nearly all XM effects and features. It supports the GUS and
  no device. It supports at least the DOS4GW dos-extender by Rational
  Systems and PMODE/W 1.20 by Charles Sheffold and Thomas Pytel. It supplies
  timer and music syncronisation functions for your production. You can also
  play S3Ms, but the player will only play what FastTracker 2 by Triton
  makes of it.

  If you find any incompatibilities with FT2 please tell me.

  Please ONLY use MXMPLAY if the size of the executable matters.
  If not use a real soundsystem like MIDAS!
  I'd also like to encourage you to make a final version of your production
  if you use a GUS-only player like MXMPLAY, because there are still so
  many guys, who do not own a GUS and demos/intros without sound are soooooo
  boooooooring.

  If you make changes to mxmplay to make it work with different systems or
  add new features to it, please send me a copy and a *description* your
  changes. I will then include it in the official package (with credits,
  of course), and you don't have to change new versions.

  I am especially interested in:
    -screen sync
    -bugfixes for assemblers other than TASM 3.1
    -Eclipse's version (what did you do to your mxmplay and why?)
    -Axon/Xenon Development's version for DOS32. (used in Supermax/Complex)


    Revision history:
==============================================================================

  1.4: 30.6.96
    -defines at the top of MXMPLAY.ASM to exclude unused effects
    -XM2MXM generates include files for MXMPLAY.ASM to exclude unused effects

  1.3: 10.4.96
    -tremor
    -set envelope position
    -glissando
    -if sustain is off no instrument changes are allowed
    -relocation free code
    -clean patterns fixed

  1.2: 30.1.96
    -source included
    -sample offset corrected
    -volume/global volume/panning slide corrected
    -starting order adjustable

  1.1: 21.12.95
    -automatic gus detect, xmpInit changed
    -global variable "__psp" needed for detect
    -names have changed, underscores now after function names
    -delta sample values for better compression
    -sync now works :), thanks go to the one who told me...

  1.0:  4.12.95
    -first release




    The conversion program:
==============================================================================

  XM2MXM [options] source [dest]

  This program converts an XM to the internal format called MXM.
  You might ask why another format, but this format shall not be used
  for music interchange, it is just very easy to read and made the code
  about 1k smaller.
  If you want to play MODs or S3Ms you have to convert them to XM first.

  options:
    -p0:   XM-panning (instruments) (default)
    -p1:  MOD-panning (LRRLLRRL)
    -p2:  MOD-panning (less extreme)
    -p3:  S3M-panning (LRLRLRLR)
    -p4:  S3M-panning (less extreme)
    -p5:    0-panning (MMMMMMMM)
     -d:  do not use delta value samples
     -i:  generate effects include file

  If you want to play a MOD use -p1, -p2 to use correct panning.
  A converted S3M would need -p3/4 if it uses standard panning, otherwise
  you'd have to change the panning values in the header of the mxm.
  (use -p1 and look for 00FFFF0000FFFF00...)

  If you want to reduce the size of the code, use the -i parameter
  and include the generated .INC file in MXMPLAY.ASM (place is marked).
  If you want to play more than one module, combine the defines in the
  .INC files with OR, except the USEFREQTAB define which must be 2 if
  both frequency tables are used.



    The MXM Format:
==============================================================================

  The MXM Format was designed to be easy to read, small, for use on a GUS
  only, and to support all of FastTracker 2's featues.
  It uses S3M like pattern packing, so you can increase the number of
  channels without a change in size (of course they would have to stay
  clear). The pattern packing of XM would increase the size. The MXM format
  uses NO SAMPLE PACKING, though it can use "delta values". If you want to
  pack the samples, you can do so, as long as the song is passed to the
  xmpInit routine unmodified. 3 dwords in the header tell you where to
  find the samples and how many there are:
    offset 1Ch: offset of the samples
    offset 20h: number of 8 bit samples
    offset 24h: number of 16 bit samples

  You will find more detailed information on the format in the source code.




    Notes on the implementation of the XM format:
==============================================================================

  E5x  (finetune)                not implemented
  EFx  (funk repeat???)          set sync value
  Sxx  -                         set sync value

  all other commands and features should be supported correctly.



    MXMPLAY.ASM and its functions:
==============================================================================

  The object file was compiled with TASM 3.1 using .386 and .model flat,prolog
  The segments and groups are the ones needed for Watcom C++ 10.0.

  -segments:
    -the code segment is _TEXT (dword public use32 class 'CODE')
    -the data segment is _DATA (dword public use32 class 'DATA')
    -the uninitialized data segment is _BSS (dword public use32 class 'BSS')
    -DGROUP consists of _DATA and _BSS
  -all function names end with an underscore and are case sensitive
  -parameters are passed in registers
  -there must be a global variable "__psp" that holds the selector of the
   program segment prefix
  -on entry to all functions the following must be true:
    -CS must point to _TEXT
    -DS must point to _DATA
    -ES must point to _DATA
    -SS must point to _DATA
    -the direction flag must be clear

  C(++) coders must include mxmplay.h for correct access.
  Assembler coders must make their own include files depending on their code,
  assembly equivalents for the C(++) stuff are in brackets.

  The object consists of the following functions:

    xmpInit
    xmpPlay
    xmpStop
    xmpSetVolume
    xmpGetSync
    xmpGetPos
    xmpGetTimer



xmpInit: (xmpInit_)
------------------------------------------------------------------------------
  int xmpInit(void *mxmmem, unsigned long pspsel, void *mxmdata, unsigned long maxtimerrate);

  Inits the soundsystem and prepares the module for playing.

  mxmmem: (esi)
    Pointer to the module. You must load the complete module from disk
    and pass the address to this function.

  pspseg: (eax)
    Selector of the Program Segement Prefix. C(++) coders should use _psp.
    You can also specify the port directly by setting the MSb.
    (eg: 0x80000220)

  mxmdata: (ebx)
    Pointer to 16k of memory for internal use.

  maxtimerrate: (ecx)
    The maximum number of clock ticks (1193046 ticks/sec) between two
    irq 0 calls. Never set this to more than 65536. Set this to 65536 if
    you want to have a periodically called routine. Install your interrupt
    handler after starting to play and deinstall before stopping to play.
    The interval between two subsequent calls to the interrupt is no longer
    than this value, but will vary while runtime.

  returnvalue: (eax)
    0: failed
    1: ok

  modifies: eax ebx ecx edx esi edi



xmpPlay: (xmpPlay_)
------------------------------------------------------------------------------
  void xmpPlay(unsigned int startord);

  Enables the timer services and starts to play the module.

  startord: (eax)
    start playing at this order

  modifies: eax ebx ecx edx esi edi



xmpStop: (xmpStop_)
------------------------------------------------------------------------------
  void xmpStop();

  Stop the sound output and disables the timer services.

  modifies: eax ebx ecx edx esi edi



xmpSetVolume: (xmpSetVolume_)
------------------------------------------------------------------------------
  void xmpSetVolume(unsigned char vol);

  Set the relative volume.

  vol: (al)
    range 0 to 64.

  modifies: nothing



xmpGetSync: (xmpGetSync_)
------------------------------------------------------------------------------
  unsigned char xmpGetSync();

  Returns the currently set syncvalue. You set the syncvalue with the command
    EFx or Sxx. I do not really know how you usually do syncronisation, but
    this might help. :)

  returnvalue: (al)
    the syncvalue

  modifies: al



xmpGetPos: (xmpGetPos_)
------------------------------------------------------------------------------
  unsigned short xmpGetPos();

  Returns the current position in the song.

  returnvalue: (ax)
    highbyte: current order
     lowbyte: current row

  modifies: ax



xmpGetTimer: (xmpGetTimer_)
------------------------------------------------------------------------------
  long xmpGetTimer();

  Returns the timer value. This values starts at the first tick of the
  module and counts up all the time at a rate of 1193046Hz.

  returns: (eax)
    the number of timer ticks since the first tick of the module.

  modifies: eax




    contact information:
==============================================================================

snailmail:

  Niklas Beisert / pascal / cubic team
  Oberstrasse 84
  20149 Hamburg
  Germany

    Fido: Niklas Beisert@2:2437/301.44
Internet: mxm@p44.nightmare.harz.de



== FILE_ID.DIZ ===============================================================
˛ cubic tiny gus ‹‹ xm player v1.4 ˛
 ‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹ €€ ‹‹‹ ‹‹ ‹‹‹‹‹‹‹‹
    ‹‹‹‹‹ ‹‹  ‹‹ €€‹‹‹  ‹‹  ‹‹‹‹‹ tm
   €€     €€  €€ €€  €€ €€ €€
   €€     €€  €€ €€  €€ €€ €€
    ﬂﬂﬂﬂﬂ  ﬂﬂﬂﬂﬂ ﬂﬂﬂﬂﬂ  ﬂﬂ  ﬂﬂﬂﬂﬂ
 ﬂﬂﬂﬂ tiny gus xm player  v1.4 ﬂﬂﬂﬂ
€                                  €
€ new features:                    €
€ -size can easily be reduced down €
€   to 3.4k (unpacked) now!        €
€                                  €
€ -flat mode, no external functs   €
€   needed. tested with dos4gw,    €
€   pmode/w 1.2 and watcom c++ 10. €
€ -supports gus & quiet (clean)    €
€ -supports xm & mod               €
€ -size: 5.6k, pmwlite size: 3.8k  €
€ -all xm features supported       €
€ -plays 99% of all effects        €
€ -supplies timer, sync and volume €
€   functions. autodetects gus.    €
ﬂ                                  ﬂ
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
